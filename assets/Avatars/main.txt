import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:shared_preferences/shared_preferences.dart';

// Main function to set up MaterialApp with Directionality
void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Biology Textbook',
      theme: ThemeData(
        primarySwatch: Colors.green,
      ),
      home: const TextbookPage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class TextbookPage extends StatefulWidget {
  const TextbookPage({Key? key}) : super(key: key);

  @override
  _TextbookPageState createState() => _TextbookPageState();
}

class _TextbookPageState extends State<TextbookPage> {
  final FlutterTts _flutterTts = FlutterTts();
  bool _isTtsInitialized = false;
  bool _isSpeaking = false;
  int? _currentlySpeakingIndex;
  double _fontSize = 16.0;
  String _selectedVoice = 'female'; // Default voice
  String _selectedLanguage = 'ta-IN'; // Default to Tamil
  List<dynamic> _availableVoices = [];
  Map<String, String>? _selectedVoiceParams;

  // Supported languages, including Indian languages
  final Map<String, String> _languages = {
    'en-IN': 'English (India)',
    'hi-IN': 'Hindi (India)',
    'ta-IN': 'Tamil (India)',
    'te-IN': 'Telugu (India)',
    'kn-IN': 'Kannada (India)',
    'ml-IN': 'Malayalam (India)',
  };

  // Map languages to their text direction (LTR or RTL)
  final Map<String, TextDirection> _languageDirections = {
    'en-IN': TextDirection.ltr,
    'hi-IN': TextDirection.ltr,
    'ta-IN': TextDirection.ltr,
    'te-IN': TextDirection.ltr,
    'kn-IN': TextDirection.ltr,
    'ml-IN': TextDirection.ltr,
  };

  // Map locale to language name in _content
  final Map<String, String> _localeToLanguage = {
    'en-IN': 'English',
    'hi-IN': 'Hindi',
    'ta-IN': 'Tamil',
    'te-IN': 'Telugu',
    'kn-IN': 'Kannada',
    'ml-IN': 'Malayalam',
  };

  // Content list
  final List<Map<String, dynamic>> _content = [
    {
      "language": "English",
      "data": [
        {
          "heading": "Introduction to Biology",
          "paragraph":
              "Biology is the study of living organisms. It covers various aspects of life, including structure, function, growth, evolution, and distribution.",
          "image":
              "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80"
        },
        {
          "heading": "Cell Structure",
          "paragraph":
              "Cells are the basic units of life. All organisms are made up of cells, which perform essential functions necessary for survival.",
          "image": null
        },
        {
          "heading": "Genetics",
          "paragraph":
              "Genetics is the study of heredity and variation in organisms. It explains how traits are passed from parents to offspring.",
          "image": null
        }
      ]
    },
    {
      "language": "Hindi",
      "data": [
        {
          "heading": "जीव विज्ञान का परिचय",
          "paragraph":
              "जीव विज्ञान जीवित प्राणियों का अध्ययन है। इसमें संरचना, कार्य, विकास, उत्क्रांति और वितरण सहित जीवन के विभिन्न पहलुओं को शामिल किया जाता है।",
          "image":
              "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80"
        },
        {
          "heading": "कोशिका संरचना",
          "paragraph":
              "कोशिकाएं जीवन की मूल इकाइयाँ हैं। सभी जीव कोशिकाओं से बने होते हैं, जो जीवित रहने के लिए आवश्यक कार्य करते हैं।",
          "image": null
        },
        {
          "heading": "आनुवंशिकी",
          "paragraph":
              "आनुवंशिकी जीवों में वंशानुक्रम और विविधता का अध्ययन है। यह बताता है कि गुण माता-पिता से संतानों तक कैसे हस्तांतरित होते हैं।",
          "image": null
        }
      ]
    },
    {
      "language": "Tamil",
      "data": [
        {
          "heading": "உயிரியல் அறிமுகம்",
          "paragraph":
              "உயிரியல் என்பது உயிருள்ள உயிரினங்களைப் பற்றிய ஆய்வாகும். இது வாழ்க்கையின் பல அம்சங்களை உள்ளடக்கியது, இதில் அமைப்பு, செயல்பாடு, வளர்ச்சி, பரிணாமம் மற்றும் பகிர்வு அடங்கும்.",
          "image":
              "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80"
        },
        {
          "heading": "செல் அமைப்பு",
          "paragraph":
              "செல்ல்கள் வாழ்க்கையின் அடிப்படை அலகுகள். அனைத்து உயிரினங்களும் செல்ல்கள் கொண்டு உருவாகியவை, அவை உயிர் வாழ தேவையான முக்கிய செயல்களைச் செய்கின்றன.",
          "image": null
        },
        {
          "heading": "மரபியல்",
          "paragraph":
              "மரபியல் என்பது உயிரினங்களில் மரபியல் மற்றும் வேறுபாடுகளைப் பற்றிய ஆய்வாகும். இது பண்புகள் பெற்றோர் மூலம் பிள்ளைகளுக்குப் பிற்பற்றப்படுவது எப்படி என்பதை விளக்குகிறது.",
          "image": null
        }
      ]
    },
    {
      "language": "Telugu",
      "data": [
        {
          "heading": "జీవశాస్త్ర పరిచయం",
          "paragraph":
              "జీవశాస్త్రం అనేది జీవుల అధ్యయనం. ఇది నిర్మాణం, ఫంక్షన్, వృద్ధి, పరిణామం మరియు పంపిణీ వంటి జీవితం యొక్క వివిధ కోణాలను కవర్ చేస్తుంది.",
          "image":
              "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80"
        },
        {
          "heading": "కణ నిర్మాణం",
          "paragraph":
              "కణాలు అనేవి జీవితం యొక్క మౌలికమైన అంకాలు. అన్ని జీవులు కణాల నుండి ఏర్పడతాయి మరియు అవి జీవించడానికి అవసరమైన ముఖ్యమైన పనులను నిర్వహిస్తాయి.",
          "image": null
        },
        {
          "heading": "జన్యుపరంపరశాస్త్రం",
          "paragraph":
              "జన్యుపరంపరశాస్త్రం అనేది వారసత్వం మరియు జీవుల్లో వైవిధ్యాన్ని అధ్యయనం చేస్తుంది. ఇది లక్షణాలు తల్లిదండ్రుల నుండి పిల్లలకు ఎలా బదిలీ అవుతాయో వివరిస్తుంది.",
          "image": null
        }
      ]
    },
    {
      "language": "Kannada",
      "data": [
        {
          "heading": "ಜೀವಶಾಸ್ತ್ರಕ್ಕೆ ಪರಿಚಯ",
          "paragraph":
              "ಜೀವಶಾಸ್ತ್ರವು ಜೀವಿಗಳ ಅಧ್ಯಯನವಾಗಿದೆ. ಇದು ರಚನೆ, ಕಾರ್ಯ, ಬೆಳವಣಿಗೆ, ವಿಕಾಸ ಮತ್ತು ವಿತರಣೆ ಸೇರಿದಂತೆ ಜೀವನದ ವಿವಿಧ ಅಂಶಗಳನ್ನು ಒಳಗೊಂಡಿದೆ.",
          "image":
              "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80"
        },
        {
          "heading": "ಕೋಶ ರಚನೆ",
          "paragraph":
              "ಕೋಶಗಳು ಜೀವನದ ಮೂಲ ಘಟಕಗಳಾಗಿವೆ. ಎಲ್ಲಾ ಜೀವಿಗಳು ಕೋಶಗಳಿಂದ ಕೂಡಿವೆ, ಅವು ಬದುಕಲು ಅಗತ್ಯವಾದ ಪ್ರಮುಖ ಕಾರ್ಯಗಳನ್ನು ನಿರ್ವಹಿಸುತ್ತವೆ.",
          "image": null
        },
        {
          "heading": "ಆನುವಂಶಿಕತೆ",
          "paragraph":
              "ಆನುವಂಶಿಕತೆಯು ಜೀವಿಗಳಲ್ಲಿ ವಂಶವಾಹಿನಿ ಮತ್ತು ವೈವಿಧ್ಯತೆಯ ಅಧ್ಯಯನವಾಗಿದೆ. ಇದು ಗುಣಗಳು ತಂದೆ-ತಾಯಿಯಿಂದ ಮಕ್ಕಳಿಗೆ ಹೇಗೆ ವರ್ಗಾಯಿಸಲ್ಪಡುತ್ತವೆ ಎಂದು ವಿವರಿಸುತ್ತದೆ.",
          "image": null
        }
      ]
    },
    {
      "language": "Malayalam",
      "data": [
        {
          "heading": "ജീവശാസ്ത്രത്തിന് പരിചയം",
          "paragraph":
              "ജീവശാസ്ത്രം എന്നത് ജീവനുള്ള ജീവികളെ കുറിച്ചുള്ള പഠനമാണ്. ഇതിൽ ഘടന, പ്രവർത്തനം, വളർച്ച, പരിണാമം, വിതരണം തുടങ്ങിയവ ഉൾപ്പെടുന്നു.",
          "image":
              "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80"
        },
        {
          "heading": "കോശഘടന",
          "paragraph":
              "കോശങ്ങൾ ജീവന്റെ അടിസ്ഥാന ഘടകങ്ങളാണ്. എല്ലാ ജീവനുകളും കോശങ്ങളാൽ നിർമ്മിതമാണ്, അവ ജീവൻ നിലനിർത്തുന്നതിനാവശ്യമായ അടിസ്ഥാന പ്രവർത്തനങ്ങൾ നടത്തുന്നു.",
          "image": null
        },
        {
          "heading": "ജനിതശാസ്ത്രം",
          "paragraph":
              "ജനിതശാസ്ത്രം എന്നത് ജീവികളിൽ മാതാവിൽ നിന്ന് മക്കൾക്ക് സ്വഭാവങ്ങൾ എങ്ങനെ പകരപ്പെടുന്നു എന്നതുമായി ബന്ധപ്പെട്ട പഠനമാണ്.",
          "image": null
        }
      ]
    },
  ];

  @override
  void initState() {
    super.initState();
    _loadPreferences();
    _initTts();
  }

  Future<void> _loadPreferences() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _selectedVoice = prefs.getString('selectedVoice') ?? 'female';
      _selectedLanguage = prefs.getString('selectedLanguage') ?? 'ta-IN';
    });
  }

  Future<void> _savePreferences(String voice, String language) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('selectedVoice', voice);
    await prefs.setString('selectedLanguage', language);
  }

  Future<void> _initTts() async {
    try {
      // Check if the selected language has content
      final languageName = _localeToLanguage[_selectedLanguage] ?? 'Tamil';
      final hasContent =
          _content.any((lang) => lang['language'] == languageName);

      if (!hasContent && mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Content not available for ${_languages[_selectedLanguage] ?? _selectedLanguage}. Defaulting to Tamil.',
            ),
            duration: const Duration(seconds: 5),
          ),
        );
        setState(() {
          _selectedLanguage = 'ta-IN'; // Default to Tamil if no content
        });
      }

      // Check if the language is supported by the TTS engine
      final availableLanguages = await _flutterTts.getLanguages;
      if (!availableLanguages.contains(_selectedLanguage)) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                'TTS not supported for ${_languages[_selectedLanguage] ?? _selectedLanguage}. Please install the appropriate language pack.',
              ),
              duration: const Duration(seconds: 5),
            ),
          );
        }
        setState(() {
          _selectedLanguage = 'en-IN'; // Fallback to Indian English
        });
      }

      await _flutterTts.setLanguage(_selectedLanguage);
      _availableVoices = await _flutterTts.getVoices;

      if (_availableVoices.isEmpty) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('No voices available on this device')),
          );
        }
        return;
      }

      _selectedVoiceParams = _pickVoice(_selectedVoice, _selectedLanguage);
      if (_selectedVoiceParams != null) {
        await _flutterTts.setVoice(_selectedVoiceParams!);
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                  'No $_selectedVoice voice available for ${_languages[_selectedLanguage] ?? _selectedLanguage}'),
            ),
          );
        }
      }

      // Set pitch and speech rate based on voice
      if (_selectedVoice == 'male') {
        await _flutterTts.setPitch(0.9);
        await _flutterTts.setSpeechRate(0.5);
      } else {
        await _flutterTts.setPitch(1.1);
        await _flutterTts.setSpeechRate(0.5);
      }

      await _flutterTts.setVolume(1.0);

      _flutterTts.setCompletionHandler(() {
        if (mounted) {
          setState(() {
            _currentlySpeakingIndex = null;
            _isSpeaking = false;
          });
        }
      });

      _flutterTts.setErrorHandler((msg) {
        if (mounted) {
          setState(() {
            _isSpeaking = false;
            _currentlySpeakingIndex = null;
          });
          if (!msg.contains('interrupted')) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('TTS Error: $msg')),
            );
          }
        }
      });

      setState(() {
        _isTtsInitialized = true;
      });
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('TTS Initialization Error: $e')),
        );
      }
    }
  }

  Map<String, String>? _pickVoice(String gender, String language) {
    if (_availableVoices.isEmpty) return null;

    final languageCode = language.toLowerCase().split('-')[0];
    final languageVoices = _availableVoices
        .where(
          (v) => v['locale']?.toLowerCase().startsWith(languageCode) ?? false,
        )
        .toList();

    if (languageVoices.isEmpty) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
                'No voices available for ${_languages[language] ?? language}. Using default voice.'),
          ),
        );
      }
      return Map<String, String>.from(_availableVoices.first);
    }

    // Try to match gender
    final genderMatch = languageVoices.firstWhere(
      (v) => v['gender']?.toLowerCase() == gender,
      orElse: () => null,
    );
    if (genderMatch != null) {
      return Map<String, String>.from(genderMatch);
    }

    // Try to match by name containing gender
    final nameMatch = languageVoices.firstWhere(
      (v) => v['name']?.toLowerCase().contains(gender) ?? false,
      orElse: () => null,
    );
    if (nameMatch != null) {
      return Map<String, String>.from(nameMatch);
    }

    // Fallback to any available voice for the language
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              'No $gender voice available for ${_languages[language] ?? language}. Using default voice.'),
        ),
      );
    }
    return Map<String, String>.from(languageVoices.first);
  }

  Future<void> _speak(String text, int index) async {
    try {
      if (_selectedLanguage == 'en-IN') {
        // Add basic slang for Indian English
        text = "$text, yaar!";
      }

      if (_isSpeaking) {
        await _flutterTts.stop();
        if (mounted) {
          setState(() {
            _isSpeaking = false;
            _currentlySpeakingIndex = null;
          });
        }
        if (_currentlySpeakingIndex == index) {
          return;
        }
      }

      if (!_isTtsInitialized) {
        await _initTts();
      }

      if (_selectedVoiceParams == null) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('No voice selected')),
          );
        }
        return;
      }

      setState(() {
        _currentlySpeakingIndex = index;
        _isSpeaking = true;
      });

      await _flutterTts.setVoice(_selectedVoiceParams!);
      await _flutterTts.speak(text);
    } catch (e) {
      if (mounted) {
        setState(() {
          _isSpeaking = false;
          _currentlySpeakingIndex = null;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: ${e.toString()}'),
            duration: const Duration(seconds: 3),
          ),
        );
      }
    }
  }

  @override
  void dispose() {
    _flutterTts.stop();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final textDirection =
        _languageDirections[_selectedLanguage] ?? TextDirection.ltr;

    // Get the content for the selected language
    final languageName = _localeToLanguage[_selectedLanguage] ?? 'Tamil';
    final selectedContent = _content.firstWhere(
      (lang) => lang['language'] == languageName,
      orElse: () => _content.first, // Default to Tamil if not found
    );
    final List<Map<String, dynamic>> sections = selectedContent['data'];

    return Directionality(
      textDirection: textDirection,
      child: Scaffold(
        appBar: AppBar(
          title: Text(
            'Biology Textbook',
            style: GoogleFonts.poppins(
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          backgroundColor: Colors.green[700],
          elevation: 0,
          actions: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              child: DropdownButton<String>(
                value: _selectedLanguage,
                icon: const Icon(Icons.language, color: Colors.white),
                dropdownColor: Colors.green[700],
                style: GoogleFonts.poppins(color: Colors.white),
                underline: Container(height: 0),
                items: _languages.entries.map((entry) {
                  return DropdownMenuItem<String>(
                    value: entry.key,
                    child: Row(
                      children: [
                        const Icon(Icons.language, color: Colors.white70),
                        const SizedBox(width: 8),
                        Text(entry.value, style: GoogleFonts.poppins()),
                      ],
                    ),
                  );
                }).toList(),
                onChanged: (String? newValue) async {
                  if (newValue != null && newValue != _selectedLanguage) {
                    setState(() {
                      _selectedLanguage = newValue;
                    });
                    await _savePreferences(_selectedVoice, newValue);
                    await _initTts();
                  }
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              child: DropdownButton<String>(
                value: _selectedVoice,
                icon: const Icon(Icons.arrow_drop_down, color: Colors.white),
                dropdownColor: Colors.green[700],
                style: GoogleFonts.poppins(color: Colors.white),
                underline: Container(height: 0),
                items: [
                  DropdownMenuItem(
                    value: 'female',
                    child: Row(
                      children: [
                        const Icon(Icons.female, color: Colors.pink),
                        const SizedBox(width: 8),
                        Text('Female Voice', style: GoogleFonts.poppins()),
                      ],
                    ),
                  ),
                  DropdownMenuItem(
                    value: 'male',
                    child: Row(
                      children: [
                        const Icon(Icons.male, color: Colors.blue),
                        const SizedBox(width: 8),
                        Text('Male Voice', style: GoogleFonts.poppins()),
                      ],
                    ),
                  ),
                ],
                onChanged: (String? newValue) async {
                  if (newValue != null && newValue != _selectedVoice) {
                    setState(() {
                      _selectedVoice = newValue;
                    });
                    await _savePreferences(newValue, _selectedLanguage);
                    await _initTts();
                  }
                },
              ),
            ),
            IconButton(
              icon: const Icon(Icons.text_decrease),
              onPressed: () {
                setState(() {
                  _fontSize = (_fontSize - 1).clamp(12.0, 24.0);
                });
              },
            ),
            IconButton(
              icon: const Icon(Icons.text_increase),
              onPressed: () {
                setState(() {
                  _fontSize = (_fontSize + 1).clamp(12.0, 24.0);
                });
              },
            ),
          ],
        ),
        body: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [Colors.green[50]!, Colors.white],
            ),
          ),
          child: sections.isEmpty
              ? const Center(child: Text('No content available'))
              : ListView.builder(
                  padding: const EdgeInsets.symmetric(
                      vertical: 16.0, horizontal: 8.0),
                  itemCount: sections.length,
                  itemBuilder: (context, index) {
                    final section = sections[index];
                    final isSpeaking = _currentlySpeakingIndex == index;

                    return Card(
                      margin: const EdgeInsets.symmetric(
                          horizontal: 12.0, vertical: 8.0),
                      elevation: 4,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15.0),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          if (section['image'] != null)
                            Hero(
                              tag: 'image_$index',
                              child: ClipRRect(
                                borderRadius: const BorderRadius.vertical(
                                    top: Radius.circular(15.0)),
                                child: Stack(
                                  children: [
                                    Image.network(
                                      section['image'],
                                      height: 200,
                                      width: double.infinity,
                                      fit: BoxFit.cover,
                                      loadingBuilder:
                                          (context, child, loadingProgress) {
                                        if (loadingProgress == null) {
                                          return child;
                                        }
                                        return Container(
                                          height: 200,
                                          color: Colors.grey[200],
                                          child: Center(
                                            child: CircularProgressIndicator(
                                              value: loadingProgress
                                                          .expectedTotalBytes !=
                                                      null
                                                  ? loadingProgress
                                                          .cumulativeBytesLoaded /
                                                      loadingProgress
                                                          .expectedTotalBytes!
                                                  : null,
                                            ),
                                          ),
                                        );
                                      },
                                    ),
                                    Positioned(
                                      bottom: 0,
                                      left: 0,
                                      right: 0,
                                      child: Container(
                                        decoration: BoxDecoration(
                                          gradient: LinearGradient(
                                            begin: Alignment.topCenter,
                                            end: Alignment.bottomCenter,
                                            colors: [
                                              Colors.transparent,
                                              Colors.black.withOpacity(0.7),
                                            ],
                                          ),
                                        ),
                                        padding: const EdgeInsets.all(16),
                                        child: Text(
                                          section['heading'],
                                          style: GoogleFonts.poppins(
                                            fontSize: 24,
                                            fontWeight: FontWeight.bold,
                                            color: Colors.white,
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            )
                                .animate()
                                .fadeIn(duration: 600.ms)
                                .slideY(begin: 0.2, end: 0),
                          Padding(
                            padding: const EdgeInsets.all(16.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    if (section['image'] == null)
                                      Expanded(
                                        child: Text(
                                          section['heading'],
                                          style: GoogleFonts.poppins(
                                            fontSize: 24,
                                            fontWeight: FontWeight.bold,
                                            color: Colors.green[900],
                                          ),
                                        ),
                                      ),
                                    Container(
                                      decoration: BoxDecoration(
                                        color: isSpeaking
                                            ? Colors.red[50]
                                            : Colors.green[50],
                                        borderRadius: BorderRadius.circular(30),
                                        boxShadow: [
                                          BoxShadow(
                                            color:
                                                Colors.black.withOpacity(0.1),
                                            blurRadius: 4,
                                            offset: const Offset(0, 2),
                                          ),
                                        ],
                                      ),
                                      child: Material(
                                        color: Colors.transparent,
                                        child: InkWell(
                                          borderRadius:
                                              BorderRadius.circular(30),
                                          onTap: () => _speak(
                                              section['paragraph'], index),
                                          child: Padding(
                                            padding: const EdgeInsets.symmetric(
                                              horizontal: 16,
                                              vertical: 8,
                                            ),
                                            child: Row(
                                              mainAxisSize: MainAxisSize.min,
                                              children: [
                                                Icon(
                                                  isSpeaking
                                                      ? Icons
                                                          .stop_circle_outlined
                                                      : Icons.volume_up_rounded,
                                                  color: isSpeaking
                                                      ? Colors.red
                                                      : Colors.green[700],
                                                ),
                                                const SizedBox(width: 8),
                                                Text(
                                                  isSpeaking
                                                      ? 'Stop'
                                                      : 'Listen',
                                                  style: GoogleFonts.poppins(
                                                    color: isSpeaking
                                                        ? Colors.red
                                                        : Colors.green[700],
                                                    fontWeight: FontWeight.w600,
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 16),
                                MarkdownBody(
                                  data: section['paragraph'],
                                  styleSheet: MarkdownStyleSheet(
                                    p: GoogleFonts.poppins(
                                      fontSize: _fontSize,
                                      height: 1.6,
                                      color: Colors.black87,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    )
                        .animate()
                        .fadeIn(duration: 400.ms, delay: (100 * index).ms)
                        .slideX(begin: 0.2, end: 0);
                  },
                ),
        ),
        floatingActionButton: FloatingActionButton.extended(
          onPressed: () {
            showSearch(
              context: context,
              delegate: _ContentSearchDelegate(sections),
            );
          },
          label: Text(
            'Search',
            style: GoogleFonts.poppins(fontWeight: FontWeight.w600),
          ),
          icon: const Icon(Icons.search),
          backgroundColor: Colors.green[700],
        ),
      ),
    );
  }
}

class _ContentSearchDelegate extends SearchDelegate<Map<String, dynamic>?> {
  final List<Map<String, dynamic>> sections;

  _ContentSearchDelegate(this.sections);

  @override
  String get searchFieldLabel => 'Search textbook...';

  @override
  List<Widget>? buildActions(BuildContext context) {
    return [
      if (query.isNotEmpty)
        IconButton(
          icon: const Icon(Icons.clear),
          onPressed: () {
            query = '';
          },
        ),
    ];
  }

  @override
  Widget? buildLeading(BuildContext context) {
    return IconButton(
      icon: const Icon(Icons.arrow_back),
      onPressed: () => close(context, null),
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    final results = sections.where((section) {
      final heading = section['heading']?.toString().toLowerCase() ?? '';
      final paragraph = section['paragraph']?.toString().toLowerCase() ?? '';
      return heading.contains(query.toLowerCase()) ||
          paragraph.contains(query.toLowerCase());
    }).toList();

    if (results.isEmpty) {
      return Center(
        child: Text(
          'No results found.',
          style: GoogleFonts.poppins(fontSize: 18),
        ),
      );
    }

    return ListView.builder(
      itemCount: results.length,
      itemBuilder: (context, index) {
        final section = results[index];
        return ListTile(
          title: Text(
            section['heading'],
            style: GoogleFonts.poppins(fontWeight: FontWeight.bold),
          ),
          subtitle: Text(
            section['paragraph'],
            maxLines: 2,
            overflow: TextOverflow.ellipsis,
            style: GoogleFonts.poppins(),
          ),
          onTap: () {
            close(context, section);
          },
        );
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestions = sections.where((section) {
      final heading = section['heading']?.toString().toLowerCase() ?? '';
      final paragraph = section['paragraph']?.toString().toLowerCase() ?? '';
      return heading.contains(query.toLowerCase()) ||
          paragraph.contains(query.toLowerCase());
    }).toList();

    return ListView.builder(
      itemCount: suggestions.length,
      itemBuilder: (context, index) {
        final section = suggestions[index];
        return ListTile(
          title: Text(
            section['heading'],
            style: GoogleFonts.poppins(fontWeight: FontWeight.bold),
          ),
          subtitle: Text(
            section['paragraph'],
            maxLines: 2,
            overflow: TextOverflow.ellipsis,
            style: GoogleFonts.poppins(),
          ),
          onTap: () {
            close(context, section);
          },
        );
      },
    );
  }
}